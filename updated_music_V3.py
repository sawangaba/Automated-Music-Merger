# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'updated_music_V1.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import os
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtCore import Qt
from PyQt5.QtCore import QPoint
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication
from PyQt5.QtWidgets import QHBoxLayout
from PyQt5.QtWidgets import QLabel
from PyQt5.QtWidgets import QPushButton
from PyQt5.QtWidgets import QVBoxLayout
from PyQt5.QtWidgets import QWidget
from pydub import AudioSegment
import time

nframe = 1
nhorizontallayout = 1
nlabel = 1
npushbutton = 0
ntimeedit = 1
o = 3
locationlst =[]
locationlist = []
b = 0
n=0
y = 0

class Ui_MainWindow(object):
        
        global n
        def setupUi(self, MainWindow):
                MainWindow.setObjectName("MainWindow")
                MainWindow.setStyleSheet("\n"
                                                "background-color: black; color: white\n"
                                                "")
                self.centralwidget = QtWidgets.QWidget(MainWindow)
                self.centralwidget.setObjectName("centralwidget")
                MainWindow.setStyleSheet("QMainWindow {border-image: url('Background/background.png');background-color: black;background-repeat: no-repeat; background-position: center;};")
                self.layout  = QVBoxLayout(self.centralwidget)
                self.layout.addWidget(MyBar(MainWindow))
                self.layout.setContentsMargins(0,0,0,0)
                self.layout.addStretch(-1)
                self.pressing = False
                MainWindow.setMinimumSize(1115, 799)
                MainWindow.setWindowFlags(Qt.FramelessWindowHint)
                # self.layout = QtWidgets.QHBoxLayout(self.centralwidget)
                # self.layout.setAlignment(Qt.AlignTop)
                # self.layout.setGeometry(QtCore.QRect(890, 50, 181, 61))
                # self.layout.setContentsMargins(0,0,0,0)
                
                

                # self.start = QPoint(0, 0)
                # self.pressing = False
                self.pushButton = QtWidgets.QPushButton(self.centralwidget)
                self.pushButton.setGeometry(QtCore.QRect(940, 70, 131, 51))
                self.pushButton.setObjectName("pushButton")
                self.pushButton.clicked.connect(self.upload)
                self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
                self.pushButton_2.setGeometry(QtCore.QRect(55, 640, 131, 51))
                self.pushButton_2.setObjectName("pushButton_2")
                self.pushButton_2.clicked.connect(self.finalize)
                self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
                self.pushButton_3.setGeometry(QtCore.QRect(940, 565, 131, 51))
                self.centralwidget.setStyleSheet(f'''
                QPushButton {{
                color: black;
                background-color: darkgrey;
                padding: 12px;
                border-radius: 4px;
                border-bottom: 4px solid darkgrey;
                }}
                QPushButton:!pressed {{border-bottom: 4px solid grey;border-top: -2px solid darkgrey;}};
                ''')
                self.pushButton_3.setObjectName("pushButton_3")
                self.pushButton_3.clicked.connect(self.clear)
                self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
                self.pushButton_4.setGeometry(QtCore.QRect(940, 635, 131, 51))
                self.pushButton_4.setObjectName("pushButton_3")
                self.pushButton_4.clicked.connect(self.randomize)
                self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
                self.scrollArea.setGeometry(QtCore.QRect(30, 145, 1041, 377))
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(self.scrollArea.sizePolicy().hasHeightForWidth())
                self.scrollArea.setSizePolicy(sizePolicy)
                self.scrollArea.setAutoFillBackground(False)
                self.scrollArea.setStyleSheet("border:none; background-color: rgba(0, 0, 0, 0); color: white")
                self.scrollArea.setVisible(False)
                self.scrollArea.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
                self.scrollArea.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
                self.scrollArea.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustIgnored)
                self.scrollArea.setWidgetResizable(True)
                self.scrollArea.setObjectName("scrollArea")
                self.scrollAreaWidgetContents = QtWidgets.QWidget()
                self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1020, 377))
                self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
                self.verticalLayout = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
                self.verticalLayout.setObjectName("verticalLayout")
                self.bar = QtWidgets.QProgressBar(self.centralwidget)
                # setting geometry to progress bar
                self.bar.setGeometry(0, 730, 1105, 70)
                # set value to progress bar
                self.bar.setValue(0)
                # changing the color of process bar
                self.bar.setStyleSheet("QProgressBar::chunk "
                                "{"
                                "background-color: aqua;"
                                "}"
                                "QProgressBar"
                          "{"
                          "background-color : black;"
                          "border : 1px"
                          "}"
                                )
                self.bar.setTextVisible(False)
                self.label_19 = QtWidgets.QLabel(self.centralwidget)
                self.label_19.setGeometry(QtCore.QRect(55, 590, 350, 16))
                self.label_19.setObjectName("label_19")
                self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
                self.textEdit.setGeometry(QtCore.QRect(350, 580, 261, 31))
                self.textEdit.setObjectName("textEdit")
                self.textEdit.setStyleSheet("border-radius:10; selection-background-color: black; selection-color: red;border: 1px solid #ccc;background-color: rgba(0, 0, 0, 0); color:grey")
                self.textEdit.setFont(QtGui.QFont('Revamped', 10))
                self.label_20 = QtWidgets.QLabel(self.centralwidget)
                self.label_20.setGeometry(QtCore.QRect(50, 60, 911, 71))
                font = QtGui.QFont()
                font.setPointSize(24)
                self.label_20.setFont(QtGui.QFont('Revamped', 25))
                self.label_19.setFont(QtGui.QFont('Revamped',13))
                self.label_19.setStyleSheet("color: darkgrey;")
                self.pushButton_2.setFont(QtGui.QFont('Revamped' , 10))
                self.pushButton.setFont(QtGui.QFont('Revamped', 10))
                self.pushButton_3.setFont(QtGui.QFont('Revamped', 10))
                self.pushButton_4.setFont(QtGui.QFont('Revamped', 8))
                self.label_20.setStyleSheet("color: qconicalgradient(cx:0, cy:0, angle:180.8, stop:0 black, stop:0.373684 grey, stop:0.45 darkgrey, stop:0.452632 black, stop:0.498947 black, stop:0.480000 aqua, stop:0.5 black, stop:0.531579 aqua, stop:0.547368 aqua, stop:1 aqua)")
                self.label_20.setObjectName("label_20")
                MainWindow.setCentralWidget(self.centralwidget)
                self.retranslateUi(MainWindow)
                QtCore.QMetaObject.connectSlotsByName(MainWindow)

        def retranslateUi(self, MainWindow):
                _translate = QtCore.QCoreApplication.translate
                MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
                self.pushButton.setText(_translate("MainWindow", "Upload"))
                self.pushButton_2.setText(_translate("MainWindow", "EXPORT"))
                MainWindow.setWindowFlags(Qt.FramelessWindowHint)
                self.pushButton_3.setText(_translate("MainWindow", "CLEAR"))
                self.pushButton_4.setText(_translate("MainWindow", "Randomize\nTheme"))
                
                self.label_19.setText(_translate("MainWindow", "Output  File  Name :"))
                self.label_20.setText(_translate("MainWindow", "Automation Software"))

        def randomize(self):
                choice1,choice2, string = self.getcolor()
                self.pushButton.setStyleSheet(string)
                self.pushButton_2.setStyleSheet(string)
                self.pushButton_3.setStyleSheet(string)
                self.pushButton_4.setStyleSheet(string)
                self.label_19.setStyleSheet("color: {}".format(choice2))
                # MyBar(self.centralwidget).changetitle(choice1,choice2)
                self.label_20.setStyleSheet("color: qconicalgradient(cx:0, cy:0, angle:180.8, stop:0 black, stop:0.373684 {}, stop:0.45 {}, stop:0.452632 black, stop:0.480000 {},  stop:0.531579 black, stop:0.547368 black, stop:1 black)".format(choice1,choice1,choice2))
                self.bar.setStyleSheet("""QProgressBar::chunk {{background-color: {};}} QProgressBar {{background-color : black;border : 1px }}""".format(choice2))
                self.textEdit.setStyleSheet("border-radius:10; selection-background-color: black; selection-color: red;border: 1px solid #ccc;background-color: rgba(0, 0, 0, 0); color:{}".format(choice2))
                self.centralwidget.setStyleSheet("""
                QPushButton {{
                color: black;
                background-color: darkgrey;
                padding: 12px;
                border-radius: 4px;
                border-bottom: 4px solid {};
                }}
                QPushButton:!pressed {{border-bottom: 4px solid {}; border-top: -2px solid {};}};
                """.format(choice1,choice2,choice1))
                
                


        def getcolor(self):
                import random
                colors = ["antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen"]

                choice1 = random.choice(colors)
                choice2 = random.choice(colors)
                string = "background-color: {}; color: {};".format(choice1,choice2)
                return choice1,choice2, string


        def clear(self):
                global nframe, nhorizontallayout,nlabel,npushbutton,ntimeedit, locationlst,n,locationlist,y
                self.scrollAreaWidgetContents.deleteLater()
                self.scrollAreaWidgetContents = QtWidgets.QWidget()
                self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1020, 377))
                self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
                self.verticalLayout = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
                self.verticalLayout.setObjectName("verticalLayout")
                nframe = 1
                nhorizontallayout = 1
                nlabel = 1
                npushbutton = 0
                ntimeedit = 1
                locationlst=[]
                n = 0
                locationlist =[]
                
                for i in range(0,y):
                        fullname = "Assets/Temp/image"+str(i)+".jpg"
                        os.remove(fullname)
                y = 0
                self.bar.setVisible(True)
                
        def finalize(self):
                self.bar.setTextVisible(False)
                lst = []
                for i in range(1,ntimeedit):

                        code = """s = self.timeEdit_{}.time().second()\n
m = self.timeEdit_{}.time().minute()\n
m = m*60\n
total_Seconds = s+m\n
lst.append(total_Seconds)""".format(i,i)
                        exec(code)
                
                
                dic = {}
                j = 2
                k = 3
                if len(locationlst)==0:
                        self.bar.setTextVisible(True)
                        self.bar.setFormat("Error!")
                elif len(locationlst)==1:
                        t = {locationlst[0]:(lst[0],lst[1])}
                        dic.update(t)
                        for key,value in dic.items():
                                code ="""keys_list = list(dic)\n
key = key.rstrip(key[-1])\n
song0 = AudioSegment.from_mp3(key)\n
song0_start = value[0]*1000\n
song0_end = value[1]*1000\n
segment1 = song0[song0_start:song0_end]\n"""
                                exec(code)
                                b = 1
                                count  = (b/len(locationlst))*100
                                self.bar.setValue(int(count))
                                b+=1
                        filename = self.textEdit.toPlainText()
                        if filename == "":
                                code2 = """segment1.export("Output/default.mp3", format="mp3", bitrate="320k")\n
time.sleep(1)\n
os.startfile("Output\default.mp3")"""
                                exec(code2)
                        else:
                                code2 = """segment1.export("Output/{}.mp3", format="mp3", bitrate="320k")\n
time.sleep(1)\n
os.startfile("Output\{}.mp3")""".format(filename,filename)
                                exec(code2)
                        self.bar.setValue(0)
                        self.bar.setTextVisible(False)
                        b = 1
                else:
                        self.bar.setTextVisible(False)
                        t = {locationlst[0]:(lst[0],lst[1])}
                        dic.update(t)
                        for i in range(0,len(locationlst)-2):
                                dic.update({locationlst[i+1]:(lst[j],lst[k])})
                                j += 2
                                k += 2 
                        t = {locationlst[len(locationlst)-1]:(lst[len(lst)-2],lst[len(lst)-1])}
                        dic.update(t)       
                        song = 0
                        b = 1
                        for key,value in dic.items():
                                code ="""keys_list = list(dic)\n
key = key.rstrip(key[-1])\n
song{} = AudioSegment.from_mp3(key)\n
song{}_start = value[0]*1000\n
song{}_end = value[1]*1000\n
segment{} = song{}[song{}_start:song{}_end]""".format(song,song,song,song,song,song,song)
                                exec(code)
                                
                                count  = (b/len(locationlst))*100
                                self.bar.setValue(int(count))
                                b+=1
                                song +=1
                        d = 0
                        for i in range(0,song-1):
                                code3="""song{} = segment{}.append(segment{}, crossfade=2000)\n
segment{}= song{}""".format(i,i,i+1,i+1,i)
                                d =i
                                exec(code3)

                        filename = self.textEdit.toPlainText()
                        if filename == "":
                                code2 = """song{}.export("Output/default.mp3", format="mp3", bitrate="320k")\n
time.sleep(1)\n
os.startfile("Output\default.mp3")""".format(d)
                                exec(code2)
                        else:
                                code2 = """song{}.export("Output/{}.mp3", format="mp3", bitrate="320k")\n
time.sleep(1)\n
os.startfile("Output\{}.mp3")""".format(d,filename,filename)
                                exec(code2)
                        self.bar.setValue(0)
                        self.bar.setVisible(False)
                        b = 1


        def oo(n):
                code4 = """os.startfile(locationlist[{}])""".format(n)
                exec(code4)

        def upload(self):
                global nframe, nhorizontallayout,nlabel,npushbutton,ntimeedit, locationlst,o,locationlist, n,y
                name = QFileDialog.getOpenFileNames(None, 'Open file', r"C:", "MP3 files (*.mp3)")
                if len(name)>1:
                        for r in range(0,len(name[0])):
                                location = name[0][r]
                                locationlist.append(location)
                                o+=1
                                locationlst.append(location)
                                locationlst[locationlst.index(location)] = location +str(o)
                                import eyed3
                                audio_file = eyed3.load(location)
                                album_name = audio_file.tag.album
                                
                                g = "Assets/Temp/image"+str(y)+".jpg"
                                for image in audio_file.tag.images:
                                        image_file = open(g, "wb")
                                        image_file.write(image.image_data)
                                        image_file.close()
                                cover = location.split("/")
                                cover = cover[len(cover)-1]
                                cover = "{}: {}".format(cover,album_name)
                                n = 0
                                y +=1
                                code = """_translate = QtCore.QCoreApplication.translate\n
self.frame{} = QtWidgets.QFrame(self.scrollAreaWidgetContents)\n
self.frame{}.setObjectName("frame{}")\n
self.frame{}.setFixedHeight(150)\n
self.horizontalLayout_{} = QtWidgets.QHBoxLayout(self.frame{})\n
self.horizontalLayout_{}.setObjectName("horizontalLayout_{}")\n
self.label_{} = QtWidgets.QLabel(self.frame{})\n
sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Preferred)\n
sizePolicy.setHorizontalStretch(0)\n
sizePolicy.setVerticalStretch(0)\n
sizePolicy.setHeightForWidth(self.label_{}.sizePolicy().hasHeightForWidth())\n
self.label_{}.setSizePolicy(sizePolicy)\n
self.label_{}.setStyleSheet("padding:10px; color: white;")\n
self.label_{}.setObjectName("label_{}")\n
self.label_{}.setWordWrap(True)\n
self.horizontalLayout_{}.addWidget(self.label_{})\n
self.pushButtonn_{} = QtWidgets.QPushButton(self.frame{})\n
sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Ignored)\n
sizePolicy.setHorizontalStretch(0)\n
sizePolicy.setVerticalStretch(0)\n
sizePolicy.setHeightForWidth(self.pushButtonn_{}.sizePolicy().hasHeightForWidth())\n
self.pushButtonn_{}.setSizePolicy(sizePolicy)\n
self.pushButtonn_{}.setStyleSheet("border-radius : 50; border : 0px solid black")\n
self.pushButtonn_{}.setText("")\n
self.pushButtonn_{}.setObjectName("pushButtonn_{}")\n
self.pushButtonn_{}.clicked.connect(lambda: Ui_MainWindow.oo({}))\n
self.horizontalLayout_{}.addWidget(self.pushButtonn_{})\n
self.label_{} = QtWidgets.QLabel(self.frame{})\n
self.label_{}.setMinimumSize(QtCore.QSize(255, 107))\n
self.label_{}.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)\n
self.label_{}.setObjectName("label")\n
self.label_{}.setFont(QtGui.QFont('Revamped',8))\n
self.horizontalLayout_{}.addWidget(self.label_{}, 0, QtCore.Qt.AlignRight)\n
self.timeEdit_{} = QtWidgets.QTimeEdit(self.frame{})\n
self.timeEdit_{}.setStyleSheet("border: 1px solid white")\n
self.timeEdit_{}.setSpecialValueText("")\n
self.timeEdit_{}.setObjectName("timeEdit_{}")\n
self.timeEdit_{}.setDisplayFormat(_translate("MainWindow", "mm:ss"))\n
self.horizontalLayout_{}.addWidget(self.timeEdit_{})\n
self.label_{} = QtWidgets.QLabel(self.frame{})\n
self.label_{}.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)\n
self.label_{}.setObjectName("label_{}")\n
self.label_{}.setFont(QtGui.QFont('Revamped',8))
self.horizontalLayout_{}.addWidget(self.label_{})\n
self.timeEdit_{} = QtWidgets.QTimeEdit(self.frame{})\n
self.timeEdit_{}.setStyleSheet("border: 1px solid white")\n
self.timeEdit_{}.setObjectName("timeEdit_{}")\n
self.timeEdit_{}.setDisplayFormat(_translate("MainWindow", "mm:ss"))\n
self.horizontalLayout_{}.addWidget(self.timeEdit_{})\n
self.verticalLayout.addWidget(self.frame{})\n
self.scrollArea.setWidget(self.scrollAreaWidgetContents)\n
self.label_{}.setText(_translate("MainWindow", "Start"))\n
self.label_{}.setText(_translate("MainWindow", "End"))\n
self.label_{}.setText(_translate("MainWindow", "{}"))\n
self.pushButtonn_{}.setStyleSheet("border-image : url(Assets/Temp/image{}.jpg); border-radius:50;")""".format(nframe, nframe, nframe,nframe, nhorizontallayout, nframe, nhorizontallayout, nhorizontallayout ,nlabel+2, nframe, nlabel+2, nlabel+2, nlabel+2, nlabel+2, nlabel+2, nlabel+2, nhorizontallayout, nlabel+2, npushbutton, nframe, npushbutton, npushbutton, npushbutton, npushbutton, npushbutton, npushbutton,npushbutton,npushbutton, nhorizontallayout, npushbutton, nlabel, nframe, nlabel, nlabel, nlabel,nlabel ,nhorizontallayout, nlabel, ntimeedit, nframe, ntimeedit, ntimeedit, ntimeedit, ntimeedit,ntimeedit, nhorizontallayout, ntimeedit, nlabel+1, nframe, nlabel+1, nlabel+1, nlabel+1,nlabel+1 ,nhorizontallayout, nlabel+1, ntimeedit+1, nframe, ntimeedit+1, ntimeedit+1,ntimeedit+1,ntimeedit+1, nhorizontallayout, ntimeedit+1, nframe, nlabel, nlabel+1, nlabel+2, cover, npushbutton,y-1)
                                exec(code)
                                nframe += 1
                                nhorizontallayout += 1
                                nlabel += 1
                                npushbutton += 1
                                ntimeedit += 2
                                n+=1
                                self.scrollArea.setVisible(True)
                else:
                        location = name[0]
                        locationlist.append(location)
                        o+=1
                        locationlst.append(location)
                        locationlst[locationlst.index(location)] = location +str(o)
                        
                        import eyed3
                        audio_file = eyed3.load(location)
                        album_name = audio_file.tag.album
                        for image in audio_file.tag.images:
                                image_file = open("Assets/Temp/image.jpg", "wb")
                                image_file.write(image.image_data)
                                image_file.close()
                        cover = location.split("/")
                        cover = cover[len(cover)-1]
                        cover = "{}: {}".format(cover,album_name)
                        n = 0
                        code = """_translate = QtCore.QCoreApplication.translate\n
self.frame{} = QtWidgets.QFrame(self.scrollAreaWidgetContents)\n
self.frame{}.setObjectName("frame{}")\n
self.frame{}.setFixedHeight(150)\n
self.horizontalLayout_{} = QtWidgets.QHBoxLayout(self.frame{})\n
self.horizontalLayout_{}.setObjectName("horizontalLayout_{}")\n
self.label_{} = QtWidgets.QLabel(self.frame{})\n
sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Preferred)\n
sizePolicy.setHorizontalStretch(0)\n
sizePolicy.setVerticalStretch(0)\n
sizePolicy.setHeightForWidth(self.label_{}.sizePolicy().hasHeightForWidth())\n
self.label_{}.setSizePolicy(sizePolicy)\n
self.label_{}.setStyleSheet("padding:10px; color: white;")\n
self.label_{}.setObjectName("label_{}")\n
self.label_{}.setWordWrap(True)\n
self.horizontalLayout_{}.addWidget(self.label_{})\n
self.pushButtonn_{} = QtWidgets.QPushButton(self.frame{})\n
sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Ignored)\n
sizePolicy.setHorizontalStretch(0)\n
sizePolicy.setVerticalStretch(0)\n
sizePolicy.setHeightForWidth(self.pushButtonn_{}.sizePolicy().hasHeightForWidth())\n
self.pushButtonn_{}.setSizePolicy(sizePolicy)\n
self.pushButtonn_{}.setStyleSheet("border-radius : 50; border : 0px solid black")\n
self.pushButtonn_{}.setText("")\n
self.pushButtonn_{}.setObjectName("pushButtonn_{}")\n
self.pushButtonn_{}.clicked.connect(lambda: Ui_MainWindow.oo({}))\n
self.horizontalLayout_{}.addWidget(self.pushButtonn_{})\n
self.label_{} = QtWidgets.QLabel(self.frame{})\n
self.label_{}.setMinimumSize(QtCore.QSize(255, 107))\n
self.label_{}.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)\n
self.label_{}.setObjectName("label")\n
self.horizontalLayout_{}.addWidget(self.label_{}, 0, QtCore.Qt.AlignRight)\n
self.timeEdit_{} = QtWidgets.QTimeEdit(self.frame{})\n
self.timeEdit_{}.setStyleSheet("border: 1px solid white")\n
self.timeEdit_{}.setSpecialValueText("")\n
self.timeEdit_{}.setObjectName("timeEdit_{}")\n
self.timeEdit_{}.setDisplayFormat(_translate("MainWindow", "mm:ss"))\n
self.horizontalLayout_{}.addWidget(self.timeEdit_{})\n
self.label_{} = QtWidgets.QLabel(self.frame{})\n
self.label_{}.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)\n
self.label_{}.setObjectName("label_{}")\n
self.horizontalLayout_{}.addWidget(self.label_{})\n
self.timeEdit_{} = QtWidgets.QTimeEdit(self.frame{})\n
self.timeEdit_{}.setStyleSheet("border: 1px solid white")\n
self.timeEdit_{}.setObjectName("timeEdit_{}")\n
self.timeEdit_{}.setDisplayFormat(_translate("MainWindow", "mm:ss"))\n
self.horizontalLayout_{}.addWidget(self.timeEdit_{})\n
self.verticalLayout.addWidget(self.frame{})\n
self.scrollArea.setWidget(self.scrollAreaWidgetContents)\n
self.label_{}.setText(_translate("MainWindow", "Start"))\n
self.label_{}.setText(_translate("MainWindow", "End"))\n
self.label_{}.setText(_translate("MainWindow", "{}"))\n
self.pushButtonn_{}.setStyleSheet("border-image : url(Assets/Temp/image.jpg); border-radius:50;")""".format(nframe, nframe, nframe,nframe, nhorizontallayout, nframe, nhorizontallayout, nhorizontallayout, nlabel+2, nframe, nlabel+2, nlabel+2, nlabel+2, nlabel+2, nlabel+2, nlabel+2, nhorizontallayout, nlabel+2, npushbutton, nframe, npushbutton, npushbutton, npushbutton, npushbutton, npushbutton, npushbutton,npushbutton,npushbutton, nhorizontallayout, npushbutton, nlabel, nframe, nlabel, nlabel, nlabel, nhorizontallayout, nlabel, ntimeedit, nframe, ntimeedit, ntimeedit, ntimeedit, ntimeedit,ntimeedit, nhorizontallayout, ntimeedit, nlabel+1, nframe, nlabel+1, nlabel+1, nlabel+1, nhorizontallayout, nlabel+1, ntimeedit+1, nframe, ntimeedit+1, ntimeedit+1,ntimeedit+1,ntimeedit+1, nhorizontallayout, ntimeedit+1, nframe, nlabel, nlabel+1, nlabel+2, cover, npushbutton)
                        exec(code)
                        nframe += 1
                        nhorizontallayout += 1
                        nlabel += 1
                        npushbutton += 1
                        ntimeedit += 2
                        n+=1
                

class MyBar(QWidget):
    

    def __init__(self, parent):
        super(MyBar, self).__init__()
        self.parent = parent
        self.layout = QHBoxLayout()
        self.layout.setContentsMargins(0,0,0,0)
        self.title = QLabel("The  Gaba  Company")

        btn_size = 35

        self.btn_close = QPushButton("X")
        self.btn_close.clicked.connect(self.btn_close_clicked)
        self.btn_close.setFixedSize(btn_size,btn_size)
        self.btn_close.setStyleSheet("background-color: red; border:0px")
        self.btn_close.setFont(QtGui.QFont('Revamped', 10))

        self.btn_min = QPushButton("-")
        self.btn_min.clicked.connect(self.btn_min_clicked)
        self.btn_min.setFixedSize(btn_size, btn_size)
        self.btn_min.setStyleSheet("background-color: grey;border:0px")
        self.btn_min.setFont(QtGui.QFont('Revamped', 10))

        self.title.setFixedHeight(35)
        self.title.setAlignment(Qt.AlignCenter)
        self.title.setFont(QtGui.QFont('Revamped', 10))
        self.layout.addWidget(self.title)
        self.layout.addWidget(self.btn_min)
        self.layout.addWidget(self.btn_close)

        self.title.setStyleSheet("""
        background-color: black;
        color: white;
        """)
        self.setLayout(self.layout)

        self.start = QPoint(0, 0)
        self.pressing = False

    def resizeEvent(self, QResizeEvent):
        super(MyBar, self).resizeEvent(QResizeEvent)
        self.title.setFixedWidth(self.parent.width())

    def mousePressEvent(self, event):
        self.start = self.mapToGlobal(event.pos())
        self.pressing = True

    def mouseMoveEvent(self, event):
        if self.pressing:
            self.end = self.mapToGlobal(event.pos())
            self.movement = self.end-self.start
            self.parent.setGeometry(self.mapToGlobal(self.movement).x(),
                                self.mapToGlobal(self.movement).y(),
                                self.parent.width(),
                                self.parent.height())
            self.start = self.end

    def mouseReleaseEvent(self, QMouseEvent):
        self.pressing = False


    def btn_close_clicked(self):
        global y
        for i in range(0,y):
                fullname = "Assets/Temp/image"+str(i)+".jpg"
                os.remove(fullname)
        y = 0
        self.parent.close()

    def btn_max_clicked(self):
        self.parent.showMaximized()

    def btn_min_clicked(self):
        self.parent.showMinimized()
      
    def changetitle(self,choice1,choice2):
        string = "background-color: {}; color: {};".format(choice1,choice2)
        self.title.setStyleSheet(string)

if __name__ == "__main__":     
        import sys
        app = QtWidgets.QApplication(sys.argv)
        MainWindow = QtWidgets.QMainWindow()
        ui = Ui_MainWindow()
        ui.setupUi(MainWindow)
        MainWindow.show()
        sys.exit(app.exec_())
